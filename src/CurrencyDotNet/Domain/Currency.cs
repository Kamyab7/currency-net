using System;
using System.Collections.Generic;

namespace CurrencyDotNet
{
    /// <summary>
    /// Unit of Exchange for money.
    /// </summary>
    public class Currency
    {
        private readonly string _name;

        /// <summary>
        /// The generic sign for unknown currency.
        /// </summary>
        /// <remarks>See : https://en.wikipedia.org/wiki/Currency_sign_(typography)</remarks>
        public const string UnknownCurrencySign = "¤";

        #region properties

        /// <summary>
        /// An AutoGenerated GUID for the currency.
        /// </summary>
        public Guid Id { get; private set; }

        /// <summary>
        /// Standard ISO-4217 code for the currency.
        /// </summary>
        public string IsoCode { get; private set; }

        /// <summary>
        /// The numeric code for the currency.
        /// </summary>
        public string NumericCode { get; private set; }

        /// <summary>
        /// English name for the currency.
        /// </summary>
        public string Name { get; private set; }

        /// <summary>
        /// The Currency symbol.
        /// </summary>
        public string Symbol { get; private set; }

        /// <summary>
        /// The number of decimal digits.
        /// </summary>
        public int DecimalCount { get; private set; }

        /// <summary>
        /// Alternate name for the currency.
        /// </summary>
        public string? AltName { get; private set; }

        /// <summary>
        /// Location names (country) which listed for this currency.
        /// </summary>
        public string[]? Locations { get; private set; }

        /// <summary>
        /// The wikipedia page url for the currency.
        /// </summary>
        public string? WikipediaUrl { get; private set; }

        /// <summary>
        /// Some currencies have more than one symbol!
        /// </summary>
        public string[]? AlternativeSymbols { get; private set; }

        #endregion


        private Currency(
            string isoCode, string numericCode, string name, string symbol,
            int decimalCount, string? altName, string[]? locations,
            string? wikipediaUrl, string[]? alternativeSymbols)
        {
            _name = name;
            isoCode.ThrowIfArgumentIsNull(nameof(isoCode));
            numericCode.ThrowIfArgumentIsNull(nameof(numericCode));
            name.ThrowIfArgumentIsNull(nameof(name));
            symbol.ThrowIfArgumentIsNull(nameof(symbol));

            if (decimalCount < 0 || decimalCount > 28)
                throw new ArgumentOutOfRangeException("decimalCount's value cannot be less than zero or greater than 28.");

            Id = Guid.NewGuid();
            DecimalCount = decimalCount;
            AltName = altName;
            IsoCode = isoCode;
            NumericCode = numericCode;
            Name = name;
            Symbol = symbol;
            Locations = locations;
            WikipediaUrl = wikipediaUrl;
            AlternativeSymbols = alternativeSymbols;
        }


        /// <summary>
        /// Creates a new Currency.
        /// </summary>
        /// <param name="code">Currency Code</param>
        /// <param name="numberCode">Currency Numeric code</param>
        /// <param name="name">Currency name</param>
        /// <param name="symbol">Currency Symbol</param>
        /// <param name="decimalCount">Decimal digits count for the currency</param>
        /// <param name="altName">Alternate name for the currency</param>
        /// <param name="locations">Locations which support this currency</param>
        /// <param name="wikipediaUrl">The url for Wikipedia page for this currency</param>
        /// <param name="alternativeSymbols"></param>
        /// <returns>A new currency with the specified attributes.</returns>
        public static Currency Create(
            string code, string numberCode, string name, string symbol, int decimalCount,
            string? altName = null, string[]? locations = null, string? wikipediaUrl = null,
            string[]? alternativeSymbols = null)
        {
            return new Currency(
                code, numberCode, name, symbol, decimalCount,
                altName, locations, wikipediaUrl, alternativeSymbols);
        }


        public static Currency? WithCode(string code)
        {
            return CurrencySource.FindByCode(code)!;
        }

        public static Currency? WithNumericCode(string numericCode)
        {
            return CurrencySource.FindByNumericCode(numericCode);
        }

        public static IEnumerable<Currency> GetAll()
        {
            return CurrencySource.FindAll();
        }
    }
}
